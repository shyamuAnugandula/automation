import requests
import datetime
# import simplejson as json
impressions = int(input("Enter number of Impressions required : "))
Start_time = datetime.datetime.now()
headers = {'User-Agent': 'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.76 Safari/537.36'} # User Agent of Chrome, you can set any browser user agent
endpoint_url= f"{bidder_endpoint_url}" # Bidder Endpoint
# Below is the json request
request_json = '''{
"id": "vz476ce1a5-1bda-4262-9183-9f94ba682728",
"imp": [{
"id": "1",
"banner": {
"w": 300,
"h": 250,
"btype": [],
"battr": [],
"pos": 1,
"expdir": []
},
"instl": 0,
"tagid": "testpub",
"bidfloor": 0.0,
"bidfloorcur": "USD",
"secure": 1
}],
"site": {
"id": "12939",
"domain": "https://www.travel.manoramaonline.com/",
"cat": ["IAB1", "IAB4", "IAB11", "IAB5", "IAB2", "IAB3", "IAB8", "IAB9", "IAB26", "IAB6", "IAB7"],
"page": "http://latlong.net/dailysp.html",
"ref": " ",
"publisher": {
"id": "31038"
}
},
"device": {
"ua": "Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/64.0.3282.186 Safari/537.36",
"geo": {
"lat": 18.975,
"lon": 72.8258,
"type": 2,
"country": "ind",
"region": "mh",
"city": "mumbai",
"zip": ""
},
"dnt": 0,
"ip": "49.248.222.99",
"devicetype": 2,
"os": "windows",
"osv": "7",
"carrier": "tata teleservices (maharashtra) ltd",
"ifa": "",
"dpidsha1": ""
},
"user": {
"id": "ee5770e2-a88c-49b1-8c7e-7b51e2a53cfd",
"buyeruid": "f1b5a527-9b31-49ce-961f-aa90244d48bd"
},
"at": 2,
"tmax": 0,
"bcat": [],
"badv": []
}
'''

count = 1
for i in range(impressions):
    try:
        response = requests.post(endpoint_url, data = request_json, verify = False, headers = headers)
        response_url = response.json()
        print(response_url)

        ####################################### NURL ##################################################
        actual_nurl = response_url["seatbid"][0]["bid"][0]["nurl"]
        actual_nurl = actual_nurl.replace("${AUCTION_PRICE}", "0.32")
        # actual_nurl= actual_nurl.replace("/win","/win_test")  # need to revert once get to live
        actual_nurl_response = requests.get(actual_nurl, verify=False, headers=headers)
        print(actual_nurl)
        # print(actual_nurl_response)

        ####################################### ADM ##################################################
        trim_adm_url = response_url["seatbid"][0]["bid"][0]["adm"]
        split_adm = trim_adm_url.split("adm='")[1]  # spliting a string into list and using index picking up adm_url
        actual_adm_url = split_adm.split(" id=")[0]  # Again spliting the last character to get adm and using list index picking up adm_url
        actual_adm_url = actual_adm_url.replace("${AUCTION_PRICE}", "0.32")
        # actual_adm_url = actual_adm_url.replace("/adm-generator","/adm-generator_test")
        actual_adm_url = actual_adm_url.rstrip("\"")
        adm_url = requests.get(actual_adm_url, verify=False,
                               headers=headers)  # Using get method will get status of adm_url
        print(actual_adm_url)
        print(adm_url)

        adm_url_response = adm_url.text  # Storing adm_response in a variable to use futher
        print(adm_url_response)

        ###################################### Impression ############################################
        imp_first_part_split = adm_url_response.split("<img src=")[
            1]  # Directly using adm_response and split to get impression url and using list index picking up impression url
        partial_impression_url = imp_first_part_split.rstrip(
            " width=\"1\" height=\"1\" />")  # trim the right part i.e width and height
        actual_impression_url = partial_impression_url.lstrip("\"") # Removing " from the start of impression url
        actual_impression_url = partial_impression_url.rstrip("\"") # Removing " from the end of impression url
        # actual_impression_url = actual_impression_url.replace("/win","/win_test")
        print(actual_impression_url)
        actual_impression_response = requests.get(actual_impression_url, verify=False,headers=headers)  # Storing the response of impression url from get method
        print(actual_impression_response)

        ################################## CDN Impression ##########################################
        cdnimp_first_part_split = adm_url_response.split("<img src=", 3)[
            2]  # Directly using adm_url_response and split to get cdn impression url and using list index picking up cdn impression url
        cdnimp_second_part_strip = cdnimp_first_part_split.rstrip(
            " width=\"1\" height=\"1\" />")  # trim the right part i.e width and height
        actual_cdn_impression_url = cdnimp_second_part_strip.lstrip(
            "\"")  # Removing " from the start of cdn impression url
        print(actual_cdn_impression_url)
        actual_cdn_impression_response = requests.get(actual_cdn_impression_url, verify=False,
                                                      headers=headers)  # Storing the response of cdn impression url from get method
        print(actual_cdn_impression_response)

        #############################  Click URL  #######################################

        click_url_first_part = adm_url_response.split("href=")[
            1]  # Directly using adm_url_response and split to get click url and using list index picking up click url
        click_url_second_part = click_url_first_part.split("img id=")[
            0]  # Split again to get click_url and using list index
        rstrip_click_url = click_url_second_part.rstrip("\"> <")  # removing right side text inside ()
        actual_click_url = rstrip_click_url.lstrip("\"")  # removing left side text inside ()
        print(actual_click_url)
        actual_click_url_response = requests.get(actual_click_url, verify=False,
                                                 headers=headers)  # Storing the response of click url from get method
        print(actual_click_url_response)

        ###############################  Vertoz Cookie Sync #######################################
        vertozcookie_first_part = adm_url_response.split("<img src=", 5)[3]  # Directly using adm_url_response and split to get vertoz cookie sync url and using list index picking up cookie sync url
        partial_vertozcookie_url = vertozcookie_first_part.lstrip("\"")  # removing left side  text inside ()
        actual_vertozcookie_url = partial_vertozcookie_url.split("\"")[0]  # split again to get cookie sync and using list index
        print(actual_vertozcookie_url)
        actual_vertozcookie_url_response = requests.get(
            actual_vertozcookie_url)  # Storing the response of click url from get method
        print(actual_vertozcookie_url_response)
        count += 1
        print(count)
    except:
        print(response)
        print("Campaign not getting qualified for above request ")

print(f"End_time : {datetime.datetime.now() - Start_time}")

